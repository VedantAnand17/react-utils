// Utilities common for renderer tests in different modules.

import { noop } from 'lodash';

/**
 * Creates a mock HTTP request.
 * @param {object} [options={}]
 * @param {string} [options.url="/mock/path"]
 * @return {object}
 */
export function mockHttpRequest({
  url = '/mock/path',
} = {}) {
  return {
    nonce: 'abcdef-dummy-nonce',
    info: 'I am a dummy HTTP request! No need for a complex mock here!',
    url,
  };
}

/**
 * Small helper class to collect and reset rendering results generated by
 * the mock response object defined below.
 */
class Render {
  constructor() {
    this.reset();
  }

  reset() {
    this.markup = '';
    this.status = 200;
  }
}

/**
 * Creates a mock HTTP response (ExpressJS Response object).
 * @return {{
 *  render: {
 *    markup: string;
 *    reset: function;
 *    status: number;
 *  };
 *  res: Express.Response;
 * }}
 */
export function mockHttpResponse() {
  const render = new Render();
  const res = {
    locals: {
      webpack: {
        devMiddleware: {
          stats: {
            toJson: () => ({
              // Note: asset names here do not match the currently
              // used naming
              // template [contenthash].xxx, but older name template
              // [chunkname]-[buildTimestamp].xxx The actual names are not
              // important for the test, and using older names allows to
              // check there is no actual change in the code logic.
              namedChunkGroups: {
                main: {
                  assets: [
                    { name: 'main-1511941200000.css' },
                    { name: 'main-1511941200000.js' },
                  ],
                },
                'test-chunk-a': {
                  assets: [{ name: 'test-chunk-a-1511941200000.css' }],
                },
                'test-chunk-b': {
                  assets: [
                    { name: 'test-chunk-b-1511941200000.js' },
                    { name: 'test-chunk-b-1511941200000.css' },
                  ],
                },
              },
            }),
          },
        },
      },
    },
    send: (chunk) => { render.markup += chunk; },
    set: noop,
    status: (status) => { render.status = status; },
  };
  return { render, res };
}

export function mockWebpackConfig() {
  return {
    context: __dirname,
    output: {
      path: '/test/path',
      publicPath: '/test/public/path/',
    },
  };
}
